!function (t) { "use strict"; var i = function (i, e) { this.$element = t(i), this.options = t.extend({}, t.fn.wtimepicker.defaults, e, this.$element.data()), this.minuteStep = this.options.minuteStep || this.minuteStep, this.showMeridian = this.options.showMeridian || this.showMeridian, this.disableFocus = this.options.disableFocus || this.disableFocus, this.template = this.options.template || this.template, this.defaultTime = this.options.defaultTime || this.defaultTime, this.open = !1, this.init() }; i.prototype = { constructor: i, init: function () { this.$element.on("click", t.proxy(this.show, this)).on("keyup", t.proxy(this.updateFromElementVal, this)), this.$widget = t(this.getTemplate()).appendTo("body"), this.$widget.on("click", t.proxy(this.click, this)), this.setDefaultTime(this.defaultTime) }, show: function (i) { i.stopPropagation(), i.preventDefault(), this.$element.trigger("show"), t("html").on("click.timepicker.data-api", t.proxy(this.hide, this)), !0 === this.disableFocus && this.$element.blur(); var e = t.extend({}, this.$element.offset(), { height: this.$element[0].offsetHeight }); return "modal" === this.options.template ? this.$widget.modal("show") : (this.$widget.css({ top: e.top + e.height, left: e.left }), this.open || this.$widget.addClass("open")), this.open = !0, this.$element.trigger("shown"), this }, hide: function () { return this.$element.trigger("hide"), t("html").off("click.timepicker.data-api", t.proxy(this.hide, this)), "modal" === this.options.template ? this.$widget.modal("hide") : this.$widget.removeClass("open"), this.open = !1, this.$element.trigger("hidden"), this }, setValues: function (i) { var e, s = i.match(/(AM|PM)/i); e = s ? s[1] : "", i = t.trim(i.replace(/(PM|AM)/i, "")); var a = i.split(":"); this.meridian = e, this.hour = parseInt(a[0], 10), isNaN(this.hour) && (this.hour = 0, this.updateElement()), this.minute = parseInt(a[1], 10), isNaN(this.minute) && (this.minute = 0, this.updateElement()) }, setDefaultTime: function (t) { if (t) { if ("current" === t) { var i = new Date, e = i.getHours(), s = Math.floor(i.getMinutes() / this.minuteStep) * this.minuteStep, a = "AM"; this.showMeridian && (0 === e ? e = 12 : e >= 12 ? (e > 12 && (e -= 12), a = "PM") : a = "AM"), this.hour = e, this.minute = s, this.meridian = a } else this.setValues("value" === t ? this.$element.val() : t); this.update() } else this.hour = 0, this.minute = 0 }, formatTime: function (t, i, e) { return t = 10 > t ? "0" + t : t, i = 10 > i ? "0" + i : i, t + ":" + i + (this.showMeridian ? " " + e : "") }, getTime: function () { return this.formatTime(this.hour, this.minute, this.meridian) }, setTime: function (t) { this.setValues(t), this.update() }, updateElement: function () { var t = this.getTime(); this.$element.val(t).change() }, updateWidget: function () { this.$widget.find("td.bootstrap-timepicker-hour").text(this.hour).end().find("td.bootstrap-timepicker-minute").text(this.minute < 10 ? "0" + this.minute : this.minute).end().find("td.bootstrap-timepicker-meridian").text(this.meridian) }, update: function () { this.updateElement(), this.updateWidget() }, updateFromElementVal: function () { var t = this.$element.val(), i = t.match(/(AM|PM)/i); i && t && (this.setValues(t), this.updateWidget()) }, click: function (i) { i.stopPropagation(), i.preventDefault(), !0 !== this.disableFocus && this.$element.focus(); var e = t(i.target).closest("a").data("action"); e && (this[e](), this.update()) }, incrementHour: function () { return this.showMeridian && 12 === this.hour ? (this.hour = 1, this.toggleMeridian()) : 23 === this.hour ? this.hour = 0 : void (this.hour = this.hour + 1) }, decrementHour: function () { return this.showMeridian && 1 === this.hour ? (this.hour = 12, this.toggleMeridian()) : 0 === this.hour ? this.hour = 23 : void (this.hour = this.hour - 1) }, incrementMinute: function () { var t = this.minute + this.minuteStep - this.minute % this.minuteStep; t > 59 ? (this.incrementHour(), this.minute = t - 60) : this.minute = t }, decrementMinute: function () { var t = this.minute - this.minuteStep; 0 > t ? (this.decrementHour(), this.minute = t + 60) : this.minute = t }, toggleMeridian: function () { this.meridian = "AM" === this.meridian ? "PM" : "AM", this.update() }, getTemplate: function () { if (this.options.templates[this.options.template]) return this.options.templates[this.options.template]; var t; switch (this.options.template) { case "modal": t = '<div class="bootstrap-timepicker modal hide fade in" style="top: 30%; margin-top: 0; width: 200px; margin-left: -100px;" data-backdrop="false"><div class="modal-header"><a href="#" class="close" data-action="hide">Ã—</a><h3>Pick a Time</h3></div><div class="modal-content"><table><tr><td><a href="#" data-action="incrementHour"><i class="icon-chevron-up"></i></a></td><td class="separator"></td><td><a href="#" data-action="incrementMinute"><i class="icon-chevron-up"></i></a></td>' + (this.showMeridian ? '<td><a href="#" data-action="toggleMeridian"><i class="icon-chevron-up"></i></a></td>' : "") + '</tr><tr><td class="bootstrap-timepicker-hour"></td> <td class="separator">:</td><td class="bootstrap-timepicker-minute"></td> ' + (this.showMeridian ? '<td class="bootstrap-timepicker-meridian"></td>' : "") + '</tr><tr><td><a href="#" data-action="decrementHour"><i class="icon-chevron-down"></i></a></td><td class="separator"></td><td><a href="#" data-action="decrementMinute"><i class="icon-chevron-down"></i></a></td>' + (this.showMeridian ? '<td><a href="#" data-action="toggleMeridian"><i class="icon-chevron-down"></i></a></td>' : "") + '</tr></table></div><div class="modal-footer"><a href="#" class="btn btn-primary" data-action="hide">Ok</a></div></div>'; break; case "dropdown": t = '<div class="bootstrap-timepicker dropdown-menu"><table><tr><td><a href="#" data-action="incrementHour"><i class="icon-chevron-up"></i></a></td><td class="separator"></td><td><a href="#" data-action="incrementMinute"><i class="icon-chevron-up"></i></a></td>' + (this.showMeridian ? '<td><a href="#" data-action="toggleMeridian"><i class="icon-chevron-up"></i></a></td>' : "") + '</tr><tr><td class="bootstrap-timepicker-hour"></td> <td class="separator">:</td><td class="bootstrap-timepicker-minute"></td> ' + (this.showMeridian ? '<td class="bootstrap-timepicker-meridian"></td>' : "") + '</tr><tr><td><a href="#" data-action="decrementHour"><i class="icon-chevron-down"></i></a></td><td class="separator"></td><td><a href="#" data-action="decrementMinute"><i class="icon-chevron-down"></i></a></td>' + (this.showMeridian ? '<td><a href="#" data-action="toggleMeridian"><i class="icon-chevron-down"></i></a></td>' : "") + "</tr></table></div>" } return t } }, t.fn.wtimepicker = function (e) { return this.each(function () { var s = t(this), a = s.data("timepicker"), n = "object" == typeof e && e; a || s.data("timepicker", a = new i(this, n)), "string" == typeof e && a[e]() }) }, t.fn.wtimepicker.defaults = { minuteStep: 15, disableFocus: !1, defaultTime: "current", showMeridian: !0, template: "dropdown", templates: {} }, t.fn.wtimepicker.Constructor = i, t(function () { t("body").on("focus.timepicker.data-api", '[data-provide="timepicker"]', function (i) { var e = t(this); e.data("timepicker") || (i.preventDefault(), e.wtimepicker(e.data())) }) }) }(window.jQuery);